import logging
import time
from typing import Callable

import psutil
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware

logger = logging.getLogger(__name__)


class PerformanceMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        start_time = time.perf_counter()
        process = psutil.Process()

        # –ü–∞–º—è—Ç—å –∏ CPU –¥–æ –∑–∞–ø—Ä–æ—Å–∞
        memory_before = process.memory_info().rss / 1024 / 1024  # MB
        cpu_before = process.cpu_percent()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = await call_next(request)

        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        end_time = time.perf_counter()
        process_time = end_time - start_time

        # –ü–∞–º—è—Ç—å –∏ CPU –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        memory_after = process.memory_info().rss / 1024 / 1024  # MB
        cpu_after = process.cpu_percent()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        logger.info(
            f"üöÄ PERFORMANCE METRICS - "
            f"Method: {request.method} | "
            f"Path: {request.url.path} | "
            f"Status: {response.status_code} | "
            f"Time: {process_time:.4f}s | "
            f"Memory: {memory_before:.1f}‚Üí{memory_after:.1f}MB "
            f"(Œî{memory_after - memory_before:+.1f}) | "
            f"CPU: {cpu_before:.1f}%‚Üí{cpu_after:.1f}%"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        response.headers["X-Process-Time"] = str(round(process_time, 4))
        response.headers["X-Memory-Used"] = str(round(memory_after, 1))
        response.headers["X-Memory-Delta"] = str(round(memory_after - memory_before, 1))

        return response
